begin;
    create table account(
        id serial primary key,
        email varchar(255) not null
    );
    insert into public.account(email)
    values
        ('aardvark@x.com');
    create table blog(
        id serial primary key,
        owner_id integer not null references account(id),
        name varchar(255) not null
    );
    insert into blog(owner_id, name)
    values
        (1, 'A: Blog 1');
    -- Connection: alias all field types and operation
    select jsonb_pretty(
        graphql.resolve($$
    {
      aA: allAccounts(first: 1) {
        tc: totalCount
        pi: pageInfo {
          hnp: hasNextPage
        }
        e: edges {
          c: cursor
          n: node{
            id_: id
            ni: nodeId
            b: blogs {
              tc2: totalCount
            }
          }
        }
      }
    }
        $$)
    );
                     jsonb_pretty                      
-------------------------------------------------------
 {                                                    +
     "data": {                                        +
         "aA": {                                      +
             "e": [                                   +
                 {                                    +
                     "c": "WyJhY2NvdW50IiwgMV0=",     +
                     "n": {                           +
                         "b": {                       +
                             "tc2": 1                 +
                         },                           +
                         "ni": "WyJhY2NvdW50IiwgMV0=",+
                         "id_": 1                     +
                     }                                +
                 }                                    +
             ],                                       +
             "pi": {                                  +
                 "hnp": false                         +
             },                                       +
             "tc": 1                                  +
         }                                            +
     },                                               +
     "errors": [                                      +
     ]                                                +
 }
(1 row)

    select graphql.resolve($$
    {
      acc: account(id: "WyJhY2NvdW50IiwgMV0=") {
        id_: id
        N: nodeId
      }
    }
    $$);
                                 resolve                                  
--------------------------------------------------------------------------
 {"data": {"acc": {"N": "WyJhY2NvdW50IiwgMV0=", "id_": 1}}, "errors": []}
(1 row)

    select graphql.resolve($$
    query Introspec {
      s: __schema {
        q: queryType {
          n: name
        }
      }
    }
    $$);
                       resolve                        
------------------------------------------------------
 {"data": {"s": {"q": {"n": "Query"}}}, "errors": []}
(1 row)

rollback;
